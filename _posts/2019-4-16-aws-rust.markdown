---
layout: post
title:  "Rust on AWS lambda!"
date:   2019-4-17 11:40:43 -0800
categories: rust aws
---

# Rust on AWS lambda!
*Disclaimer: I'm still a noob to serverless, so bear with me, plz*

Rust functions in serverless environments like AWS lambda are doable without too much extra pain. AWS currently provides starter kits and tooling for several runtimes you'd expect - Java, Node, .NET core, and newly, Go ... 
BUT! There is nothing stopping us from uploading a binary that interacts via standard IO. 

# advantages

Since Rust is a compiled to a native binary and uses no garbage collection, we have quick startup, quick execution, and completely predictable memory usage. All of these are advantages when using AWS lambda which charges us by the millisecond of execution and megabyte of RAM used.

# disadvantages

We can't just upload code to the aws console and expect it to run. You can develop locally, but ultimately we'll need to upload a linux_x64 binary 

So, if you're building on Mac or Windows this might pose a problem getting GNU GCC toolchain up and running.

Docker to the rescue! `softprops/lambda-rust` provides a build environment that's just for this sort of thing. 
The docker file starts with this line
`FROM lambci/lambda:build-provided` which aims to replicate the AWS lambda runtime environment - it loads in a stable copy of rust and you run it like this from the directory with your .toml 

```bash
$ docker run --rm \
    -v ${PWD}:/code \
    -v ${HOME}/.cargo/registry:/root/.cargo/registry \
    -v ${HOME}/.cargo/git:/root/.cargo/git \
    softprops/lambda-rust:latest
```
this will take in your code and recompile it for the stable-x86_64-unknown-linux-gnu 

`docker pull softprops/lambda-rust`
https://github.com/softprops/lambda-rust

https://crates.io/crates/lambda_runtime

https://github.com/lambci/docker-lambda#documentation

https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/
