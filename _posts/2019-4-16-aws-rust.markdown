---
layout: post
title:  "Rust on AWS lambda!"
date:   2019-4-17 11:40:43 -0800
categories: rust aws
---

# Rust on AWS lambda!
*Dissclaimer: I'm still a noob to serverless, so bear with me, plz*

Rust functions in serverless environments like AWS lambda are doable without too much extra pain. AWS currently provides starter kits and tooling for several runtimes you'd expect - Java, Node, .NET core, and newly, Go ... 
BUT! There is nothing stopping us from uploading a binary that interacts via standard IO. 

# advantages

Since Rust is a compiled to a native binary and uses no garbage collection, we have quick startup, quick execution, and completely predictable memory usage. All of these are advantages when using AWS lambda which charges us by the millisecond of execution and megabyte of RAM used.

# disadvantages

We can't just upload code to the aws console and expect it to run. We need to compile a binary that'll run on natively on Linux x64.
So, if you're building on Mac or Windows this might pose a problem.

```bash
$ docker run --rm \
    -v ${PWD}:/code \
    -v ${HOME}/.cargo/registry:/root/.cargo/registry \
    -v ${HOME}/.cargo/git:/root/.cargo/git \
    softprops/lambda-rust:latest
```

`docker pull softprops/lambda-rust`
https://github.com/softprops/lambda-rust

https://crates.io/crates/lambda_runtime

https://github.com/lambci/docker-lambda#documentation

https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/
