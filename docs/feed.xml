<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.abhinavsaxena.com/moonwalk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.abhinavsaxena.com/moonwalk/" rel="alternate" type="text/html" /><updated>2025-02-24T01:46:09+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/feed.xml</id><title type="html">üå≤ johncsimon.github.io üê¶</title><subtitle>sabbatical blog! üöÄ</subtitle><author><name>Abhinav Saxena</name></author><entry><title type="html">Poor Man‚Äôs Audiobook Reader</title><link href="https://www.abhinavsaxena.com/moonwalk/posts/2025/02/09/poor-mans-audiobook-reader.html" rel="alternate" type="text/html" title="Poor Man‚Äôs Audiobook Reader" /><published>2025-02-09T18:04:18+00:00</published><updated>2025-02-09T18:04:18+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/posts/2025/02/09/poor-mans-audiobook-reader</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/posts/2025/02/09/poor-mans-audiobook-reader.html">&lt;p&gt;I‚Äôm currently reading a contemporary history of Steve Jobs‚Äôs time with the creation and unraveling of NeXT Computer - &lt;a href=&quot;https://www.goodreads.com/book/show/226316.Steve_Jobs_the_NeXT_Big_Thing&quot;&gt;Steve Jobs and the NeXT Big Thing&lt;/a&gt;.
&lt;img src=&quot;jobscover.png&quot; alt=&quot;Steve Jobs and the NeXT Big Thing&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today, popular culture paints him as an iconic figure, but when the book was written in 1993 NeXT was a money pit, only kept alive with cash infusions from outside investors as money was burnt. It‚Äôs a wild ride, I highly recommend it, especially with hindsight.&lt;/p&gt;

&lt;p&gt;Unfortunately, reading books cover to cover is hard for me. I rely on audiobooks so I can ride the bus or do dishes while I absorb a book. Unfortunately, there is no audiobook release of this book.&lt;/p&gt;

&lt;p&gt;I found the book in PDF form on &lt;a href=&quot;https://archive.org/details/steve_jobs_the_next_big_thing_1993_pdf__mlib&quot;&gt;archive.org&lt;/a&gt;. Unfortunately PDFs are more of a page layout language like HTML instead of a store of text.&lt;/p&gt;

&lt;p&gt;If you were to use Text to Speech functionality say - &lt;a href=&quot;https://support.apple.com/guide/mac-help/have-your-mac-speak-text-thats-on-the-screen-mh27448/mac&quot;&gt;speak visible content&lt;/a&gt; on your PC or phone on a typical website or PDF you have to ‚Äòbaby sit‚Äô what is being read so that the reader doesn‚Äôt get ‚Äòlost‚Äô or get caught up on footnotes or stop abruptly or be unable to handle a change in fonts. It‚Äôs not obvious how broken this functionality is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;iostextreader.png&quot; alt=&quot;Speak Visible Content&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plain text&lt;/strong&gt; is the best for a text to speech program. Luckily, archive.org provides a plain text version of the book which was created via optical character recognition (see the archive.org site). Short of a few footnotes, it‚Äôs 95% of what we need.&lt;/p&gt;

&lt;p&gt;Except‚Ä¶ text to speech generation is a high CPU task, Apple iOS doesn‚Äôt like long running tasks. You can‚Äôt scrub back and forth within a document like you can with an audio book or video. Also, it seems that this functionality within iOS doesn‚Äôt see as much development as other parts of the OS, it‚Äôs generally a janky experience more optimized for the vision impaired than my use case.&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;we need an offline bulk text to speech generator&lt;/strong&gt;. Luckily, macOS provides just the very thing hidden as one of the standard MacOS command line utilities - this is the &lt;strong&gt;say&lt;/strong&gt; utility.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;say -v Bad\ News &quot;Captain, you are needed on the bridge&quot; --rate=150
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;example call - see the man pages ‚Äúman say‚Äù&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;say &lt;span class=&quot;nt&quot;&gt;--voice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Ava &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# use &apos;?&apos; to get a list of all the available voices&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--input-file&lt;/span&gt; Steve_Jobs_&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;_the_NeXT_Big_Thing_1993_djvu.txt &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# path to plain text file&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;m4b &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# File for the output format, m4b is the apple&apos;s audiobook equavalent of m4a see &apos;say --file-format=&apos;?&apos; &apos; for the list of these&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--output-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MyOutputFile.m4b &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# output file&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;150 &lt;span class=&quot;c&quot;&gt;# speaking rate in words per minute, to your taste.&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# print the progress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is awesome! But after letting it run for one hour the CPU is still at 100% and the process is consuming 2.3 GB of RAM and the output file MyOutoutFile.m4b is about 50 MB on disk.&lt;/p&gt;

&lt;p&gt;Something is up ‚Ä¶ let‚Äôs see the word count of this file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wc -lw Steve_Jobs_\&amp;amp;_the_NeXT_Big_Thing_1993_djvu.txt
14908  122808 Steve_Jobs_&amp;amp;_the_NeXT_Big_Thing_1993_djvu.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so 15000 lines, 122000 words - at 150 words / minute this is about 13 hours to read through all of it, and an audiobook of that length is roughly 1 GB.&lt;/p&gt;

&lt;p&gt;Maybe the compression or some other non-default setting is mucking with this? I remove everything except the input and output files parameters and I still see the same poor performance.&lt;/p&gt;

&lt;p&gt;Let‚Äôs break this down into 1000 line chunks, and feed each one to &lt;strong&gt;say&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;split -d -l 1000 Steve_Jobs_\&amp;amp;_the_NeXT_Big_Thing_1993_djvu.txt Steve1000__
time for file in Steve1000__*; do say \
    -f &quot;$file&quot; \
    -o &quot;$file.m4b&quot; \
    --file-format=m4bf \
    --rate=150 \
    --progress; \
done;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well that‚Äôs interesting, the process completed in 10 minutes and produced 14 files that comprise the audio book.&lt;/p&gt;

&lt;p&gt;But, I don‚Äôt want 14 parts, I‚Äôd like, say, three parts of 5000 lines each. I re-run the script ‚Ä¶
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split -d -l 5000 Steve_Jobs_\&amp;amp;_the_NeXT_Big_Thing_1993_djvu.txt Steve5000__&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And each part takes 30 minutes to generate, for a total of 90 minutes&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Lines of text per part&lt;/th&gt;
      &lt;th&gt;Time To Generate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;15 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;90 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15000&lt;/td&gt;
      &lt;td&gt;did not complete&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;so-whats-the-take-away-here&quot;&gt;So, what‚Äôs the take away here?&lt;/h2&gt;

&lt;p&gt;Intuitively, generating voice from a text file would be a linear operation. Text goes in, Audio goes out, no doubling back through a stream. But, there‚Äôs clearly a bug in the implementation of &lt;strong&gt;say&lt;/strong&gt; that makes the run time be something larger than O(n^2). Apparently having &lt;strong&gt;say&lt;/strong&gt; spew out hours of audio for an entire book was never a tested use case. Except, &lt;strong&gt;say&lt;/strong&gt; has been around for as long as MacOSX has been around, one would think all the bugs have been worked out. Apparently not; you have to test and test and test, there will always be surprises.&lt;/p&gt;</content><author><name>Abhinav Saxena</name></author><category term="posts" /><summary type="html">I‚Äôm currently reading a contemporary history of Steve Jobs‚Äôs time with the creation and unraveling of NeXT Computer - Steve Jobs and the NeXT Big Thing.</summary></entry><entry><title type="html">The Perspicacious Polyglot‚Äôs Programming Language Plethora</title><link href="https://www.abhinavsaxena.com/moonwalk/polyglot/2019/01/17/polyglot-setup.html" rel="alternate" type="text/html" title="The Perspicacious Polyglot‚Äôs Programming Language Plethora" /><published>2019-01-17T19:40:43+00:00</published><updated>2019-01-17T19:40:43+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/polyglot/2019/01/17/polyglot-setup</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/polyglot/2019/01/17/polyglot-setup.html">&lt;p&gt;I like to play around with lots of different programming languages, but install too many and they pollute your working environment, so it‚Äôs better to have them installed as a user instead of root. 
Here‚Äôs a way to get several of them installed into your unix user directory. 
If things go wrong, or you get bored you can easily &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf&lt;/code&gt; the installation.&lt;/p&gt;

&lt;h1 id=&quot;initial-install&quot;&gt;Initial Install&lt;/h1&gt;
&lt;p&gt;Let‚Äôs get ourselves a minimal debian environment. I‚Äôm using docker here, but you can use a native install, or a VM, or Windows Services for Linux with the ubuntu install.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;john@BigBox:~/git/JohnCSimon.github.io&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; debian /bin/bash
Unable to find image &lt;span class=&quot;s1&quot;&gt;&apos;debian:latest&apos;&lt;/span&gt; locally
latest: Pulling from library/debian
cd8eada9c7bb: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Digest: sha256:58a80e0b6aa4d960ee2a5452b0230c406c47ed30a66555ba753c8e1710a434f5
Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;debian:latest
root@6d933dddbbcd:/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just to satisfy my OCD let‚Äôs get the latest updates.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install gnupg2 curl procps -y&lt;/code&gt;
 Installs gpg2, curl and ps&lt;/p&gt;

&lt;h1 id=&quot;ruby&quot;&gt;ruby&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpg2 --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\curl -sSL https://get.rvm.io | bash -s stable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To start using RVM you need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source /etc/profile.d/rvm.sh&lt;/code&gt; or re-login to re-load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From here you can run - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm list known&lt;/code&gt; and you‚Äôll see a list of ruby flavors and individual versions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# MRI Rubies&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]1.8.6[-p420]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]1.8.7[-head] &lt;span class=&quot;c&quot;&gt;# security released on head&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]1.9.1[-p431]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]1.9.2[-p330]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]1.9.3[-p551]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.0.0[-p648]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.1[.10]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.2[.10]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.3[.8]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.4[.5]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.5[.3]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-]2.6[.0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MRI Ruby is the reference version of Ruby so let‚Äôs install the latest version.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm install ruby-2.6.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm running debian and rvm might ask for your root password to install some prerequsites from apt before compiling a new version.&lt;/p&gt;

&lt;p&gt;Congrats, you now have a ruby install&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
ruby 2.6.0p0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-12-25 revision 66547&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-linux]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;from here you can now do whatever since I‚Äôm blogging this using jekyll&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install bundler jekyll&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;go&quot;&gt;go&lt;/h1&gt;
&lt;p&gt;Go is a language that releases new versions on a regular basis. 
There‚Äôs a similar tool to rvm called gvm. It‚Äôs a ‚Äúgo version manager‚Äù available from here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/moovweb/gvm&lt;/code&gt; that‚Äôll let you install multiple versions and set $GOPATH and $GOROOT.&lt;/p&gt;

&lt;p&gt;as a regular user:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Cloning from https://github.com/moovweb/gvm.git to /root/.gvm
No existing Go versions detected
Installed GVM v1.0.22

Please restart your terminal session or to get started right away run
 &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /root/.gvm/scripts/gvm&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you should be able to run and see&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm version
Go Version Manager v1.0.22 installed at /home/john/.gvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gvm listall&lt;/code&gt;
which will give you a list of all the available versions of go.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$gvm&lt;/span&gt; listall

gvm gos &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

   go1
   go1.0.1
   ...
   go1.11rc1
   go1.11rc2
   go1.11.1
   go1.11.2
   go1.11.3
   go1.11.4
   go1.12beta1
   go1.12beta2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;of which there are entirely too many.&lt;/p&gt;

&lt;p&gt;From here, we can install go as our user via binary here:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gvm install go1.4 -B&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;try it out&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go version
go version go1.4 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can see it gets installed here:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOROOT&lt;/span&gt;
/home/john/.gvm/gos/go1.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the gvm link earlier, in order to compile a go build environment for versions 1.5 on we require another go build environment. 
Go compiles itself! Neat huh?&lt;/p&gt;

&lt;p&gt;As of now the latest version is go1.11.4&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOROOT_BOOTSTRAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GOROOT&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;go1.11.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go version
go version go1.4 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;you can run
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gvm use        - select a go version to use (--default to set permanently)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm use go1.11.4 &lt;span class=&quot;nt&quot;&gt;--default&lt;/span&gt;
Now using version go1.11.4
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go version
go version go1.11.4 linux/amd64
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOROOT&lt;/span&gt;
/home/john/.gvm/gos/go1.11.4
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;
/home/john/.gvm/pkgsets/go1.11.4/global
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /home/john/.gvm/gos/go1.11.4
AUTHORS  CONTRIBUTING.md  CONTRIBUTORS  LICENSE  PATENTS  README.md  VERSION  api  bin  doc  favicon.ico  lib  manifest  misc  pkg  robots.txt  src  &lt;span class=&quot;nb&quot;&gt;test
ls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;
overlay  pkg  src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Be sure to set ‚Äìdefault so you keep the same version when you relaunch the shell, so that whatever you install stays where you expect it.&lt;/p&gt;

&lt;h1 id=&quot;node-js&quot;&gt;node js&lt;/h1&gt;
&lt;p&gt;node.js, the server side javascript framework&lt;/p&gt;

&lt;p&gt;nvm is Node Version Manager. Install it like this:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since there are major revisions to the javascript language between node 4, 6, 8 I‚Äôve found I‚Äôve had to switch more often between these versions according to project than I did with other languages.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm ls-remote&lt;/code&gt; and get a list of all the node versions available&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nvm
Example:
  nvm install 8.0.0                     Install a specific version number
  nvm use 8.0                           Use the latest available 8.0.x release
  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3
  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3
  nvm alias default 8.1.0               Set default node version on a shell
  nvm alias default node                Always default to the latest available node version on a shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so if you run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;10
Downloading and installing node v10.15.0...
Downloading https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.gz...
&lt;span class=&quot;c&quot;&gt;######################################################################## 100.0%&lt;/span&gt;
Computing checksum with &lt;span class=&quot;nb&quot;&gt;sha256sum
&lt;/span&gt;Checksums matched!
Now using node v10.15.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v6.4.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Creating default &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;: default -&amp;gt; 10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; v10.15.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;whereis node
node: /home/john/.nvm/versions/node/v10.15.0/bin/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and you can set it to be the default so the setting persists between sessions&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm alias default 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now you can run:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
v10.15.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
6.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;rust&quot;&gt;rust&lt;/h1&gt;
&lt;p&gt;Rust is another language that sees regular updates. You‚Äôll just have to check which is the version for the 2015 and 2018 edition.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://sh.rustup.rs -sSf | sh



Current installation options:

   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
&amp;gt;

select 1 

To configure your current shell run source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/.cargo/env&lt;/code&gt; to your path in .bashrc&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;whereis cargo
cargo: /home/john/.cargo/bin/cargo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;whereis rustc
cargo: /home/john/.cargo/bin/rustc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Abhinav Saxena</name></author><category term="polyglot" /><summary type="html">I like to play around with lots of different programming languages, but install too many and they pollute your working environment, so it‚Äôs better to have them installed as a user instead of root. Here‚Äôs a way to get several of them installed into your unix user directory. If things go wrong, or you get bored you can easily rm -rf the installation.</summary></entry><entry><title type="html">Gradual Typing With Javascript and VS Code</title><link href="https://www.abhinavsaxena.com/moonwalk/posts/2018/12/29/javascript-gradual-typing.html" rel="alternate" type="text/html" title="Gradual Typing With Javascript and VS Code" /><published>2018-12-29T19:40:43+00:00</published><updated>2018-12-29T19:40:43+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/posts/2018/12/29/javascript-gradual-typing</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/posts/2018/12/29/javascript-gradual-typing.html">&lt;p&gt;Recently I had to write a file uploader for AWS S3 in node.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aws-sdk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;signatureVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadToS3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks simple enough, but you‚Äôre probably going to be spending a decent amount of time googling around for examples if the parameters in an s3 call are more than just basic hello world. Add to this javascript is a dynamically typed language; you won‚Äôt know if your code will work until you run it, but you‚Äôre also working with Amazon‚Äôs AWS SDK, it‚Äôs derived from Java and expects a few things beyond just numbers and strings. In the end, you‚Äôd be beating your head against the stack traces and other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP 400 - Bad Request&lt;/code&gt; errors coming out of the S3 service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there anything that can help guarantee your calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload&lt;/code&gt; are legit with some sort of type checking?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôve probably heard of the type annotated javascript superset language &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; and its supplementary type definition repository &lt;a href=&quot;http://definitelytyped.org/&quot;&gt;Definitely Typed&lt;/a&gt;, which contains definitions for many popular NPM packages including AWS-SDK. This would be great except switching from Javascript to TypeScript requires adoption from the rest of the team, separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ts&lt;/code&gt; files, and modifications to your build process. Is there any way to get this without futzing with your existing project?&lt;/p&gt;

&lt;p&gt;If you‚Äôre using the Visual Studio Code editor it turns out you can enable &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files&quot;&gt;type checking on a per-file basis&lt;/a&gt; by adding the comment to the beginning of the file&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// @ts-check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to the beginning of your file.
&lt;img src=&quot;typeError.png&quot; alt=&quot;typeerror&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parameters variable is highlighted in red, and when you mouseover it you‚Äôll see:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Argument of type &apos;{ Bucket: string; Body: string; }&apos; is not assignable to parameter of type &apos;PutObjectRequest&apos;.
  Property &apos;Key&apos; is missing in type &apos;{ Bucket: string; Body: string; }&apos; but required in type &apos;PutObjectRequest&apos;.ts(2345)
s3.d.ts(3640, 5): &apos;Key&apos; is declared here.
const parameters: {
    Bucket: string;
    Body: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a bunch of things happening here!&lt;/p&gt;

&lt;p&gt;It turns out VS Code has pulled in the AWS S3 type definitions in the background. The type of the parameter parameter that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3.upload&lt;/code&gt; takes is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PutObjectRequest&lt;/code&gt;. The Type Script compiler is kvetching over a missing required field it needs to say the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parameters&lt;/code&gt; variable is of that type. There‚Äôs nothing stopping you from running the code as it stands here, it‚Äôll just crash at runtime.&lt;/p&gt;

&lt;p&gt;When you add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Key&lt;/code&gt; parameter (the unique file key in an S3 bucket), the red squiggly underline disappears and you have a properly formed object.&lt;/p&gt;

&lt;p&gt;The same checking is useful for output types.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can mouseover s3.upload and see it returns a type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS.S3.ManagedUpload.SendData&lt;/code&gt;, which means the destructuring operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ Location }&lt;/code&gt; is guaranteed to work and Location will be populated.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;Type Annotation and Checking within javascript
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSDoc - the type annotation here is based after JSDoc, so looking at the docs can‚Äôt hurt&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://usejsdoc.org/tags-type.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;More to come, as with introducing gradual typing, learning this stuff is also a gradual process that pays you back the more you put into it.&lt;/p&gt;</content><author><name>Abhinav Saxena</name></author><category term="posts" /><summary type="html">Recently I had to write a file uploader for AWS S3 in node.</summary></entry></feed>